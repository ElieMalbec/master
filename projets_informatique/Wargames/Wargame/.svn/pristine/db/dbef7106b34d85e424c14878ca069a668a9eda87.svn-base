# -*- coding: utf-8 -*-
import CreationTroupe as CT
import random
"""Module permettant de gérer la confrontation de deux armées"""


def moteur_de_combat(armee1, armee2):
    """Le moteur de combat permet de déterminer une armée gagnante, on passe en paramètres les deux armées
    qui doivent combattre.
    L'armée la plus rapide dispose d'un bonus d'attaque et 2.5%, le combat se déroule en tour par tour, où la première
    armée attaque la seconde et inversement. La hiérarchie des troupes permet de supprimer certaines unités avant
    d'autres. Les points infligés à l'armée adverse sont : armeeAdverse.PA - monarmee.DF

    Des troupes sont supprimées tant que les points de vie de cette unité sont inférieurs aux points d'attaque restants.
    Si il ne reste pas assez de points d'attaque pour supprimer les dernières troupes (Généraux), ils s'additionnent
    à chaque tour. Les statistiques et totaux des armées sont recalculés à chaque tour.

    Possibilité d'afficher la liste des morts de chaque tour avec les fonctions associées.
    Le moteur de combat retourne une valeur 1 pour une victoire de l'armée 1 et 2 pour la seconde.

    Le combat continue tant qu'il ny' a pas d'armée battue.
    De plus, si aucune armée n'a un avantage de vitesse, une armée au hasard possèdera le bonus, permet d'éviter
    les égalités si deux mêmes armées.
    Il faut passer en paramètres des copies d'armées pour ne pas modifier directement les troupes des armées elles-mêmes
    """

    tour = 1
    hierarchie = construire_hierarchie()

    rapide = comparaison_vitesse(armee1.retour_totaux(), armee2.retour_totaux())
    if rapide == 1:
        armee1.PA = modifier_stats(armee1.retour_totaux())
    elif rapide == 2:
        armee2.PA = modifier_stats(armee2.retour_totaux())
    else:
        rand = random.randint(0,1)
        if rand == 0:
            armee1.PA = modifier_stats(armee1.retour_totaux())
        else:
            armee2.PA = modifier_stats(armee2.retour_totaux())

    #     Tant qu'une armée n'est pas battue, on recommence.
    while not armee_battue(armee1) and not armee_battue(armee2):
        if tour > 100:  # Si partie infinie stopper
            break
        degats_recus_armee1 = armee2.PA - armee1.DF
        degats_recus_armee2 = armee1.PA - armee2.DF

        armee1, reste_pa2, morts1 = retirer_morts(armee1, degats_recus_armee1, hierarchie)
        armee2, reste_pa1, morts2 = retirer_morts(armee2, degats_recus_armee2, hierarchie)

        armee1.reset_totaux()
        armee2.reset_totaux()

        armee1.PA += reste_pa1
        armee2.PA += reste_pa2

        armee1.calcul_totaux()
        armee2.calcul_totaux()

        tour += 1
    if armee_battue(armee1):
        return 2
    elif armee_battue(armee2):
        return 1
    else:
        return -1


def retirer_morts(armee, points_infliges, hierarchie):
    """ Fonction permettant de retirer les troupes suivant la hiérarchie dans l'armée.
    Elle supprime les troupes pour infliger les pointsInfligés sur les PV des unités.
    Si il n'y a pas assez de points à infliger sur une unité, le reste est renvoyé pour le
    prochain tour"""
    morts = {}
    for cle in hierarchie:
        if len(armee.troupes[cle]) > 0:
            while len(CT.CreationTroupe.troupes[cle]) > 0:
                if points_infliges < CT.CreationTroupe.troupes[cle][1]:
                    return armee, points_infliges, morts
                if len(armee.troupes[cle]) > 0:
                    del (armee.troupes[cle][-1])  # Suppression des troupes une par une
                points_infliges -= CT.CreationTroupe.troupes[cle][1]
                if cle in morts:
                    morts[cle] += 1
                else:
                    morts[cle] = 1
    return armee, 0, morts


def afficher_morts(morts):
    """Permet d'afficher le nombre de morts sous forme simple"""
    for cle, valeur in morts.items():
        print(valeur, cle, "sont morts au combat")


def armee_battue(armee):
    """Fonction qui permet de vérifier si il reste encore des unités dans l'armée
    L'armée est battue si il n'y a plus de combattants de chaque unité dans les listes troupes de l'armée
    Renvoi alors True"""
    for troupe in armee.troupes:
        if len(armee.troupes[troupe]) > 0:
            return False
    else:
        return True


def comparaison_vitesse(stats1, stats2):
    """Permet de comparer la vitesse des deux armées et retourne la plus rapide
    Si aucune armée n'a un avantage de vitesse, retourne 0. Les totaux sont contenus dans les attribus des armées"""
    if stats1[3] > stats2[3]:
        return 1
    elif stats2[3] > stats1[3]:
        return 2
    else:
        return 0


def modifier_stats(stats_armee):
    """Augmente la valeur de l'attaque de 2.5%"""
    stats_armee = int(stats_armee[1] * 1.025)
    return stats_armee


def construire_hierarchie():
    """Permet de retourner le placement de la troupe dans la hiérarchie
    Plus le placement est haut, plus la troupe est résistante et succombe en dernier
    La valeur de la hiérarchie est contenue dans la liste des troupes de la Classe CreationTroupe"""
    hierarchie = {}
    for troupe in CT.CreationTroupe.troupes:
        hierarchie[CT.CreationTroupe.troupes[troupe][0]] = CT.CreationTroupe.troupes[troupe][6]
        # On affecte à chaque troupe sa valeur dans la hiérarchie
    hierarchie = sorted(hierarchie, key=hierarchie.get)
    # Met une liste ordonnée des troupes suivant leur hiérarchie
    return hierarchie
