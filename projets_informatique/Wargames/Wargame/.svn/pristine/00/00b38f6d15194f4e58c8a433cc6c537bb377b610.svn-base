# -*- coding: utf-8 -*-
import creationArmee as CA
import moteurCombat as MC
from CreationTroupe import*
from Armee import *
import copy
import time  # Pour execution time

start_time = time.time()

'''Cette fonction a pour objectif de tester la performance d'une armée en lui faisant affronter un certain nombre
d'adversaires. On la renvoie avec son nombre de victoires.'''


def une_armee_et_ses_victoires(nombre_troupes, nombre_tests):
    compteur = 0
    nbr_victoires = 0
    armee1 = CA.creation_armee_alea_troupe_par_troupe(nombre_troupes)
    while compteur < nombre_tests:
        carmee1 = copy.deepcopy(armee1)
        armee2 = CA.creation_armee_alea_troupe_par_troupe(nombre_troupes)
        combat = MC.moteur_de_combat(carmee1, armee2)
        if combat == 1:
            nbr_victoires = nbr_victoires + 1
        compteur = compteur + 1
    return [armee1, nbr_victoires]


'''Cette fonction va créer une population composée d'individus (des armées) créé(e)s aléatoirement, et la renvoyer. 
Nous allons ensuite pouvoir traiter cette population qui est la première partie de la composition 
d'un algorithme génétique.'''


def population_simple(taille_pop, nombre_troupes):
    pop = CA.cree_n_armee_alea_troupe_par_troupe(taille_pop, nombre_troupes)
    return pop
    '''pop = []
    i = 0
    while i < taille_pop:
        armee = CA.creation_armee_alea_troupe_par_troupe(nombre_troupes)
        pop.append(armee)
        i += 1
    return pop'''


'''Création d'une population évoluée, composée d'armées ayant remporté déjà un certain nombre de combats.'''


def population_evoluee(taille_pop, nombre_troupes, nombre_tests):
    pop = []
    i = 0
    while i < taille_pop:
        a = une_armee_et_ses_victoires(nombre_troupes, nombre_tests)
        """Si l'armée est parvenue à remporter la moitié ou plus de ses combats, alors elle est considérée comme 
        semi-performante."""
        if a[1] >= (nombre_tests // 2):
            pop.append(a[0])
            i += 1
    return pop


def afficher_pop(pop):
    for i in range(len(pop)):
        Armee.afficher_armee(pop[i])


'''On débute le processus avec une sélection par tournoi. Le principe est de créer un tournoi qui verra s'affronter un 
certain nombre N d'individus d'une population (ici, les individus sont des armées). On récupère ensuite un tableau 
d'armées performantes, ayant passé le premier processus de sélection, la sélection par tournoi.  '''

'''Cette fonction va gérer l'affrontement des armées côtes à côtes dans une population. Ainsi, la population que l'on 
obtiendra à la suite de l'application de cette fonction aura la longueur de la population de départ divisée par 2. 
Il ne restera que les meilleures. Cette fonction retourne donc un tableau contenant des objets de type armée.'''


def tournoi_pop_simple(pop):
    plus_fortes = []
    i = 0
    if len(pop) > 2:
        while i + 1 < len(pop):
            carmee1 = copy.deepcopy(pop[i])
            carmee2 = copy.deepcopy(pop[i + 1])
            combat = MC.moteur_de_combat(carmee1, carmee2)
            if combat == 1:
                plus_fortes.append(pop[i])
                i = i + 2
            elif combat == 2:
                plus_fortes.append(pop[i + 1])
                i = i + 2
            elif combat == -1:
                plus_fortes.append(pop[i])
                i = i + 2

    elif len(pop) == 2:
        carmee1 = copy.deepcopy(pop[0])
        carmee2 = copy.deepcopy(pop[1])
        combat = MC.moteur_de_combat(carmee1, carmee2)
        if combat == 1:
            plus_fortes.append(pop[0])
        elif combat == 2:
            plus_fortes.append(pop[1])
        elif combat == -1:
            plus_fortes.append(pop[0])

    """On ne gère pas le cas où len(pop)<2 car il n'arrivera jamais en raison du choix de la forme 
    d'utilisation de l'algorithme."""
    return plus_fortes


'''Cette fonction organise un tournoi au sein d'une population en se basant sur la fonction précédente. On suppose que 
la taille de la population de départ sera supérieure à 8 et égale à une puissance de 2 pour faciliter le calcul du
vainqueur. Le tournoi est organisé de la même manière qu'un tournoi de sport ou de jeu : des éliminatoires à l'issue
desquelles il ne restera que huit armées, un quart de finale avec pour résultat les quatre armées gagnantes, 
les demies finales d'où ressortiront les deux meilleures, et enfin la finale pour départager les deux armées.
Cette fonction retourne un objet de type armée.'''


def organisation_tournoi_simple(pop):
    # print("Voici les inscris pour ce tournoi : \n")
    # print("Débutons le tournoi : \n")
    # print("Phases éliminatoires : \n")
    eliminatoires = tournoi_pop_simple(pop)
    while len(eliminatoires) > 8:
        eliminatoires = tournoi_pop_simple(eliminatoires)
    # print("Quart finale : \n")
    quart = tournoi_pop_simple(eliminatoires)
    # print("Demi finale \n")
    demi = tournoi_pop_simple(quart)
    # print("DEMI")
    # print("Finale \n")
    # print("Voici notre vainqueur :\n")
    finale = tournoi_pop_simple(demi)
    # print("FINALE")
    return finale[0]


'''Cette fonction renvoie un tableau d'armées (dont le nombre est paramétré) ayant remporté un tournoi au sein 
d'une population dont le nombre est lui aussi paramétré, que l'on choisit en fonction du besoin.'''


def des_armees_victorieuses(taille_pop, nombre_troupes, armees_obtenues):
    armees = []
    i = 0
    while i < armees_obtenues:
        pop = population_simple(taille_pop, nombre_troupes)
        tournoi = organisation_tournoi_simple(pop)
        armees.append(tournoi)
        i = i + 1
    return armees

'''Nous allons organiser notre sélection par tournoi comme nous le ferions dans la réalité : des championnats 
départementaux, des championnats régionaux qui verront s'affronter les meilleurs de chaque département, 
des championnats nationaux qui verront s'affronter les meilleurs de chaque région et enfin les championnats mondiaux 
qui verront s'affronter les meilleurs de chaque nation.'''


def championnats_departementaux(nombre_participants, nombre_troupes, classee):
    # print("Les championnats départementaux : \n")
    if classee == 0:
        participants = population_simple(nombre_participants, nombre_troupes)
    else:
        participants = population_evoluee(nombre_participants, nombre_troupes, classee)
    resultat = organisation_tournoi_simple(participants)
    return resultat


def championnats_regionaux(taille_pop, nombre_troupes, nombre_departements, classee):
    # print("Les championnats régionaux : \n")
    vainqueurs_departementaux = []
    i = 0
    while i < nombre_departements:
        departementaux = championnats_departementaux(taille_pop, nombre_troupes, classee)
        vainqueurs_departementaux.append(departementaux)
        i = i + 1
    if nombre_departements >= 8:
        resultat = organisation_tournoi_simple(vainqueurs_departementaux)
        # print("Le vainqueur et représentant régional est : \n")
        return resultat
    else:
        resultat = tournoi_pop_simple(vainqueurs_departementaux)
        # print("Le vainqueur et représentant régional est : \n")
        return resultat[0]


def championnats_nationaux(taille_pop, nombre_troupes, nombre_regions, nombre_departements, classee):
    # print("Les championnats nationaux : \n")
    i = 0
    vainqueurs_regionaux = []
    while i < nombre_regions:
        regionaux = championnats_regionaux(taille_pop, nombre_troupes, nombre_departements, classee)
        vainqueurs_regionaux.append(regionaux)
        i = i + 1
    if nombre_regions >= 8:
        resultat = organisation_tournoi_simple(vainqueurs_regionaux)
        # print("Le vainqueur et représentant national est : \n")
        return resultat
    else:
        resultat = tournoi_pop_simple(vainqueurs_regionaux)
        # print("Le vainqueur et représentant national est : \n")
        return resultat[0]


def championnats_mondiaux(taille_pop, nombre_troupes, nombre_pays, nombre_regions, nombre_departements, classee):
    # print("Les championnats mondiaux :\n")
    i = 0
    vainqueurs_nationaux = []
    while i < nombre_pays:
        champion_national = championnats_nationaux(taille_pop, nombre_troupes, nombre_regions, nombre_departements,
                                                   classee)
        vainqueurs_nationaux.append(champion_national)
        i = i + 1
    if nombre_pays >= 8:
        resultat = organisation_tournoi_simple(vainqueurs_nationaux)
        # print("Le vainqueur et champion du monde est : \n")
        # Armee.afficher_armee(resultat)
        return resultat
    else:
        resultat = tournoi_pop_simple(vainqueurs_nationaux)
        # print("Le vainqueur et champion du monde est : \n")
        # afficher_pop(resultat)
        return resultat[0]


def des_champions_du_monde(nombre_champions, taille_armee, classee):
    i = 0
    des_champions = []
    while i < nombre_champions:
        champ = championnats_mondiaux(16, taille_armee, 16, 16, 16, classee)
        des_champions.append(champ)
        i += 1
    return des_champions


def mutation(armee1, armee2, nombre_troupes):
    i = 0
    while i < 10:
        for troupe in CreationTroupe.troupes:
            if len(armee1.troupes[troupe]) == 0:
                if len(armee2.troupes[troupe]) != 0:
                    a = armee1.troupes[troupe]
                    armee1.troupes[troupe] = armee2.troupes[troupe]
                    armee2.troupes[troupe] = a
            else:
                a = armee2.troupes[troupe]
                armee2.troupes[troupe] = armee1.troupes[troupe]
                armee1.troupes[troupe] = a
            i = i+1
            if i >= 10:
                break
    p1 = armee1.COUT
    p2 = armee2.COUT
    p1_pt = p1 - nombre_troupes
    p2_pt = p2 - nombre_troupes
    autorise = int(nombre_troupes*(1/10))
    if p1_pt <= autorise and p2_pt <= autorise:
        if p1_pt > p2_pt:
            return armee1
        elif p1_pt == p2_pt:
            armee = tournoi_pop_simple([armee1, armee2])
            return armee[0]
        else:
            return armee2
    elif p1_pt > autorise and p2_pt <= autorise:
        return armee2
    elif p1_pt <= autorise and p2_pt > autorise:
        return armee1
    elif p1_pt > autorise and p2_pt > autorise:
        return None


def evaluation(armee_testee, nombre_tests, nombre_troupes):
    i = 0
    victoires = 0
    while i < nombre_tests:
        carmee = copy.deepcopy(armee_testee)
        armee2 = CA.creation_armee_alea_troupe_par_troupe(nombre_troupes)
        combat = MC.moteur_de_combat(carmee, armee2)
        if combat == 1:
            victoires = victoires + 1
        i = i + 1
        if i == nombre_tests:
            break
    if victoires >= (nombre_tests) // 3:
        return True
    else:
        return False

def algorithme_genetique_parametre(nombre_troupes, faible_ou_forte, niveau_ia, mutee, evalu):
    eval = None
    if faible_ou_forte == 0:
        classee = 0
    else:
        '''On fixe les combats de base pour les armées formant les premières populations à 10.'''
        classee = 10

    '''On choisit d'effectuer des championnats avec une population de départ de 16 armées à chaque fois pour simplifier
    la gestion du tournoi et éviter un temps de calcul trop long.'''
    if niveau_ia == 0:
        if mutee == 0:
            armee = championnats_departementaux(16, nombre_troupes, classee)
        else:
            armee1 = championnats_departementaux(16, nombre_troupes, classee)
            armee2 = championnats_departementaux(16, nombre_troupes, classee)
            armee = mutation(armee1, armee2, nombre_troupes)
            if armee == None:
                while armee == None:
                    armee1 = championnats_departementaux(16, nombre_troupes, classee)
                    armee2 = championnats_departementaux(16, nombre_troupes, classee)
                    armee = mutation(armee1, armee2, nombre_troupes)
                    if armee != None:
                        break
        if evalu == 1:
            eval = evaluation(armee, 10, nombre_troupes)
    elif niveau_ia == 1:
        if mutee == 0:
            armee = championnats_regionaux(16, nombre_troupes, 16, classee)
        else:
            armee1 = championnats_regionaux(16, nombre_troupes, 16, classee)
            armee2 = championnats_regionaux(16, nombre_troupes, 16, classee)
            armee = mutation(armee1, armee2, nombre_troupes)
            if armee == None:
                while armee == None:
                    armee1 = championnats_regionaux(16, nombre_troupes, 16, classee)
                    armee2 = championnats_regionaux(16, nombre_troupes, 16, classee)
                    armee = mutation(armee1, armee2, nombre_troupes)
                    if armee != None:
                        break
        if evalu == 1:
            eval = evaluation(armee, 20, nombre_troupes)
    elif niveau_ia == 2:
        if mutee == 0:
            armee = championnats_nationaux(16, nombre_troupes, 16, 16, classee)
        else:
            armee1 = championnats_nationaux(16, nombre_troupes, 16, 16, classee)
            armee2 = championnats_nationaux(16, nombre_troupes, 16, 16, classee)
            armee = mutation(armee1, armee2, nombre_troupes)
            if armee == None:
                while armee == None:
                    armee1 = championnats_nationaux(16, nombre_troupes, 16, 16, classee)
                    armee2 = championnats_nationaux(16, nombre_troupes, 16, 16, classee)
                    armee = mutation(armee1, armee2, nombre_troupes)
                    if armee != None:
                        break
        if evalu == 1:
            eval = evaluation(armee, 30, nombre_troupes)
    elif niveau_ia == 3:
        if mutee == 0:
            armee = championnats_mondiaux(16, nombre_troupes, 16, 16, 16, classee)
        else:
            armee1 = championnats_mondiaux(16, nombre_troupes, 16, 16, 16, classee)
            armee2 = championnats_mondiaux(16, nombre_troupes, 16, 16, 16, classee)
            armee = mutation(armee1, armee2, nombre_troupes)
            if armee == None:
                while armee == None:
                    armee1 = championnats_mondiaux(16, nombre_troupes, 16, 16, 16, classee)
                    armee2 = championnats_mondiaux(16, nombre_troupes, 16, 16, 16, classee)
                    armee = mutation(armee1, armee2, nombre_troupes)
                    if armee != None:
                        break
        if evalu == 1:
            eval = evaluation(armee, 40, nombre_troupes)

    armee.reset_totaux()
    armee.calcul_totaux()
    armee.points = armee.COUT
    armee.creation_limites()
    return [armee, eval]


# print("\nExecution time : ")
# print("--- %s seconds ---" % (time.time() - start_time))
# del start_time
